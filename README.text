********************************************************************************************************************************************************************
- Sometimes if left idle for too long, the DB may time out, just refresh the page and your todo's will show up again
- Tried to use JS to create a line through the title of a todo item, for the user to have it marked as complete, but because of the way my page refreshes to update
    the todo list, the effect was not persistent and I couldnt figure out how to fix it. Instead there are "Done" and "Not Done" buttons which do function by
    sending a change to the value in the database, 1 = done, 0 = not done
- Check localhost files to use the right one, I included one with autoincrememnt option and one without, not sure which one was needed
*********************************************************************************************************************************************************************


U04 TO-DO-APP Chasacademy Fullstack 2020

Skapa ett webbprojekt som är en att-göra-lista där listan sparas och läses in från en databas. 

Funktionalitet:
PHP, HTML och CSS med koppling till en MySQL-databas med en tabell för uppgifter
varje uppgift ska ha: 
    + ett unikt id
    + en titel
    + en uppgiftstext
    
    användaren ska kunna:
    + visa alla uppgifter
    + lägga till en uppgift
    + ändra en uppgift
    + ta bort en uppgift
    ? markera en uppgift som klar
    + alla ändringar ska sparas i databasen
    grundläggande design av formulär och uppgiftslista med CSS (Obs design är ej fokus för uppgiften, viktigast är att den är användbar och fungerar)
    minst ett HTML-formulär som med hjälp av PHP kan hantera uppgifterna och uppdateringen av dem

Utökad funktionalitet (ej krav)
    Gör det möjligt att skapa användarnamn och flera listor knutna till en specifikt användarnamn (obs ej autentisering med lösenord)
    Gör funktionalitet för att ta bort alla färdiga uppgifter
    Gör funktionalitet för att markera alla uppgifter
    I detta moment kommer ni enskilt att få skapa en digital att-göra-lista i en dynamisk webbplats, efter egen design, med PHP, HTML och CSS för att vidareutveckla era kunskaper i webbutveckling. Den här uppgiften går ut på att i bygga en webbplats som nyttjar en databas i PHP. 

Mål
En webbplats skriven med PHP, HTML och CSS samt en databas i MySQL (JS får användas men är inte ett krav, JS får dock ej användas på serversidan)
En MySQL databas med tabeller och data
Hantera uppgifter
Skapa (Create)
Läsa (Read)
Uppdatera (Update)
Ta bort (Delete)
Markera uppgift som klar
Minst ett formulär som hanterar CRUD (se ovan) för uppgifterna
Design är inte en prioriterad del av uppgiften men grundläggande design av formulär och uppgiftslista är önskvärt
Versionshantering med Git (inte en commit på slutet av uppgiften, utan regelbundna commits med kommentarer kring vad som implementerats)

Inlämning
Den färdiga inlämningen ska laddas upp på GitHub classroom https://classroom.github.com/a/dqO0d3MU  med relevanta filer för PHP, HTML och CSS  samt instruktioner i separat(a) sql-fil(er) med SQL-kod som skapar den databas och de tabeller som används för inlämningen. Databasen behöver inte innehålla någon data men applikationen ska gå att köra med de inställningar som skickas med. 

Betygsättning
Den här inlämningen ger underlag för följande kursmål. 
    BE 1.1 PHP
    BE 1.7 Relationsdatabaser, SQL och ER-modellering
    BE 1.12 XML och andra dataformat
    BE 1.13 Webbservrar
    BE 2.1 Webbutveckla med objektorienterad PHP
    BE 2.4 Hantera, administrera och strukturera databaser
    BE 3.1 Arbeta som Fullstack-webbutvecklare med backendutveckling

Godkänd
För att nå Godkänd som betyg på denna inlämning ska du:
utför alla färdigheter som uppgiften har som mål med gott handlag
Med gott handlag syftas det till att inlämnad kod ska enhetligt följa standard (förslagsvis PSR-2)

Väl godkänd
För att nå Väl godkänd som betyg på denna inlämning ska du:
utför alla färdigheter som uppgiften har som mål med mycket gott handlag
Mycket gott handlag omfattar godkänd nivå men inlämning innehåller även utförlig och enhetlig dokumentation för hela kodbasen (i både kod och separat dokumentation), samt väldesignad struktur för kod och databas. 

Mål för momentet
    BE 1.1 PHP
    BE 1.7 Relationsdatabaser, SQL och ER-modellering
    BE 1.12 XML och andra dataformat
    BE 1.13 Webbservrar
    BE 2.1 Webbutveckla med objektorienterad PHP
    BE 2.4 Hantera, administrera och strukturera databaser
    BE 3.1 Arbeta som Fullstack-webbutvecklare med backendutvecklingande design

Kursmål
Notation
    BE 2.1 Webbutveckla med objektorienterad PHP
    PG 2.6 Skapa bra kodstruktur och dokumentation i ett projekt
    PG 2.9 Arbeta med versionshantering

extracode:
 <!-- // echo '<div class="todo-card">';
    // echo '<div class="card-text">';
    // echo '<ul>';
    // echo '<li><b>Title: </b>' . $dbRow['title'] . '</li>';
    // echo '<li><b>ToDo: </b>' . $dbRow['text'] . '</li>';
    // // echo '<li><b>Done: </b>' . $dbRow['done'] . '</li>';
    // echo '<b>Done: </b> <input type="checkbox" id="done-check"> <br>';
    // echo '</div>';
    // echo '<div class="card-button-holder">';
    // echo '<form method="POST" action="edit-todo.php">';
    // echo '<button type="submit">Edit</button>';
    // echo '</form>';
    // echo '<form method="POST" action="delete-todo.php">';
    // echo '<button type="submit">Delete</button>';
    // echo '</form>';
    // echo '</div>';
    // // echo ' <button>Edit</button>';
    // // echo ' <button>Delete</button>';
    // echo '</ul>';
    // echo '</div>';